PART
{
	name = RockerArm_R_BKI
	module = Part
	author = RoverDude
	MODEL {
		model = Tenacity/Parts/Common/Rocker-Bogie/Rocker-Bogie-RockerArm_R
		texture = Curiosity_Diff, Tenacity/Parts/Common/RoverBody/Curiosity_Diff
	}

	NODE
	{
		name = N1
		transform = N1
		size=0
		method=FIXED_JOINT
		rigid = true
	}
	rescaleFactor = 0.625
	CoMOffset = 0.0, 0.0, -0.5
	node_attach = 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0
	node_stack_bottom = -0.055654, 0.0, 0.0, -1.0, 0.0, 0.0, 0
	stackSymmetry = 3
	TechRequired = advConstruction
	entryCost = 1000
	cost = 60
	category = Robotics
	subcategory = 0
	title = Forward Movable Rocker Arm - Left
	manufacturer =  #autoLOC_501649		//#autoLOC_501649 = Kerbal Motion LLC
	description = <#ef7b06>Attach to the node of the left Rocker Servo Joint.</color> Control the roctation with the Common Rover Body.
	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,0
	mass = 0.032
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 1
	crashTolerance = 12
	breakingForce = 200
	breakingTorque = 200
	maxTemp = 2000 // = 5000
	bulkheadProfiles = size0
	tags = robot actuator rotate servo wheel arm truss

	MODULE
	{
		name = ModuleRoboticServoHinge
		servoTransformName = TopJoint
		baseTransformName = BottomJoint
		servoAttachNodes = N1
		servoSrfMeshNames = RotorArm-R
		traverseVelocityLimits = 1, 180
		hardMinMaxLimits = 0.0, 48.11
		softMinMaxAngles = 0.0, 48.11
		targetAngle = 0
		mainAxis = X
		maxMotorOutput = 50
		driveSpringMutliplier = 100
		driveDampingMutliplier = 20
		motorizedMassPerKN = 0.0002
		motorizedCostPerDriveUnit = 1
		connectedMassScale = 1
		efficiency = 0.75
		baseResourceConsumptionRate = 0.02
		referenceConsumptionVelocity = 180
		// if RESOURCE is used, negative power is simply dumped
		RESOURCE
		{
			name = ElectricCharge
			rate = 1
		}
		// INPUT_RESOURCE is by default equivalent to RESOURCE
		//INPUT_RESOURCE
		//{
		//	name = ElectricCharge
		//	rate = 1
		//}
		//OUTPUT_RESOURCE is required to reclaim energy from negative power
		//OUTPUT_RESOURCE
		//{
		//	name = ElectricCharge
		//	rate = 1
		//}
	}
	MODULE
	{
		name = ModuleCargoPart
		stackableQuantity = 3
		packedVolume = 15
	}
}
